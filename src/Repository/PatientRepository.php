<?php

namespace App\Repository;

use App\Traits\RepositoryPaginatorTrait;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getAvailablePatients($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        if (!empty($filters['name'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('p.name', ':name')
                )
                ->setParameter('name', $filters['name'])
            ;
        }

        if (!empty($filters['age'])) {
            list($firstAge, $lastAge) = explode('-', $filters['age']);
            $qb
                ->andWhere(
                    $qb->expr()->between('p.age', ':firstAge', ':lastAge')
                )
                ->setParameter('firstAge', $firstAge)
                ->setParameter('lastAge', $lastAge);
            ;
        }

        if (!empty($filters['dateOfBirth'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('p.dateOfBirth', ':dateOfBirth')
                )
                ->setParameter('dateOfBirth', '%' . $filters['dateOfBirth'] . '%')
            ;
        }

        if (!empty($filters['gender'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('p.gender', ':gender')
                )
                ->setParameter('gender', $filters['gender'])
            ;
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);
        return $paginator;
    }
}
